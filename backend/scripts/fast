#!/usr/bin/env python3

import subprocess
import sys
from typing import Annotated

import typer
from alembic import command
from alembic.config import Config

app = typer.Typer()
db_app = typer.Typer()
docker_app = typer.Typer()

app.add_typer(db_app, name="db")
app.add_typer(docker_app, name="docker")
alembic_ini_path = "alembic.ini"


@app.command("start")
def start():
    """
    Starts the API server
    """
    cmd = ["python", "server"]
    subprocess.run(cmd, check=True)


@app.command("format")
def code_format():
    """
    Formats the code
    """
    cmd = ["ruff", "format"]
    subprocess.run(cmd, check=True)


@app.command("lint")
def code_lint():
    """
    Lints the code
    """
    subprocess.run(["ruff", "check"], check=True)


@docker_app.command("start")
def docker_start():
    """
    Runs the API server in a Docker container.
    """
    subprocess.run(
        ["docker", "compose", "run", "-p", "8000:8000", "client-api"], check=True
    )


@db_app.command("migrate")
def db_migrate(
    message: Annotated[
        str, typer.Option("--message", "-m", help="A custom migration message")
    ] = "",
):
    """
    Creates a new autogenerated database migration file
    """
    subprocess.run(
        [
            "alembic",
            "-c",
            alembic_ini_path,
            "revision",
            "--autogenerate",
            "-m",
            message,
        ],
        check=True,
    )


@db_app.command("upgrade")
def db_upgrade(
    revision: Annotated[
        str,
        typer.Option(
            "--revision", "-r", help="Target revision for upgrade. Defaults to head."
        ),
    ] = "head",
):
    """
    Upgrades the database to the latest revision or to a specific revision
    """
    subprocess.run(
        [
            "alembic",
            "-c",
            alembic_ini_path,
            "upgrade",
            revision,
        ],
        check=True,
    )


@db_app.command("downgrade")
def db_downgrade(
    revision: Annotated[str, typer.Argument(help="Target revision for downgrade.")],
):
    """
    Downgrades the database to a specific revision
    """
    subprocess.run(
        [
            "alembic",
            "-c",
            alembic_ini_path,
            "downgrade",
            revision,
        ],
        check=True,
    )


@db_app.command("identify_heads")
def identify_heads():
    try:
        result = subprocess.run(
            ["alembic", "-c", alembic_ini_path, "heads"],
            check=True,
            capture_output=True,
            text=True,
        )
        print(f"Current heads: {result.stdout}")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


@db_app.command("merge_heads")
def db_merge_heads(head_one: str, head_two: str):
    """
    Merges two heads of the database and applies the migrations
    """

    alembic_cfg = Config(alembic_ini_path)

    try:
        print(f"Merging heads: head_one={head_one}, head_two={head_two}")
        command.merge(
            alembic_cfg,
            revisions=[head_one, head_two],
            message=f"merge heads {head_one} and {head_two}",
        )
        print("Merge migration created successfully.")

        print("Upgrading database to head...")
        command.upgrade(alembic_cfg, "head")
        print("Database upgraded successfully.")

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    app()
